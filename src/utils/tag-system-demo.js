const { tagSystem, extractTags } = require('./common_tags');

/**
 * Demostraci√≥n del sistema avanzado de tags
 * Muestra normalizaci√≥n, agrupaci√≥n y an√°lisis de equivalencias
 */

console.log('üß™ DEMOSTRACI√ìN DEL SISTEMA AVANZADO DE TAGS');
console.log('='.repeat(60));

// 1. Demostrar normalizaci√≥n de tags equivalentes
console.log('\n1. üìù NORMALIZACI√ìN DE TAGS EQUIVALENTES');
console.log('-'.repeat(40));

const equivalentTags = [
  'gcp',
  'google cloud',
  'Google Cloud Platform',
  'js',
  'javascript',
  'JavaScript',
  'k8s',
  'kubernetes',
  'Kubernetes',
  'ts',
  'typescript',
  'TypeScript',
  'react-native',
  'React Native',
];

console.log('Tags originales:', equivalentTags);
const normalizedTags = tagSystem.normalizeTags(equivalentTags);
console.log('Tags normalizados:', normalizedTags);
console.log('‚úÖ Duplicados eliminados:', equivalentTags.length - normalizedTags.length);

// 2. Analizar texto con diferentes variaciones
console.log('\n2. üîç AN√ÅLISIS DE TEXTO CON VARIACIONES');
console.log('-'.repeat(40));

const jobDescriptions = [
  'Desarrollador con experiencia en GCP y K8s para microservicios',
  'Frontend developer with React.js and TypeScript knowledge',
  'Buscamos experto en Google Cloud Platform y React Native',
  'Backend engineer: Node.js, PostgreSQL, Docker, AWS',
];

for (const [index, desc] of jobDescriptions.entries()) {
  console.log(`\n${index + 1}. "${desc}"`);
  const tags = extractTags(desc);
  console.log(`   Tags extra√≠dos: [${tags.join(', ')}]`);
}

// 3. Demostrar agrupaci√≥n de tags
console.log('\n3. üè∑Ô∏è AGRUPACI√ìN DE TAGS POR CATEGOR√çAS');
console.log('-'.repeat(40));

const sampleTags = ['react', 'python', 'aws', 'postgresql', 'docker', 'jest'];
for (const tag of sampleTags) {
  const group = tagSystem.getTagGroup(tag);
  const category = tagSystem.getTagCategory(tag);
  console.log(`${tag} ‚Üí Categor√≠a: ${category}, Grupo: ${group ? group.name : 'ninguno'}`);
}

// 4. Sugerir tags relacionados
console.log('\n4. üîó TAGS RELACIONADOS');
console.log('-'.repeat(40));

const baseTag = 'react';
const relatedTags = tagSystem.getRelatedTags(baseTag);
console.log(`Tags relacionados con "${baseTag}":`, relatedTags);

// 5. An√°lisis completo de tags de un trabajo
console.log('\n5. üìä AN√ÅLISIS COMPLETO DE TAGS');
console.log('-'.repeat(40));

const jobTags = ['js', 'react', 'gcp', 'postgres', 'k8s', 'javascript', 'google cloud'];
const analysis = tagSystem.analyzeTags(jobTags);

console.log('Tags originales:', analysis.original);
console.log('Tags normalizados:', analysis.normalized);
console.log('Duplicados eliminados:', analysis.duplicatesRemoved);
console.log('Por categor√≠as:', analysis.categories);
console.log('Por grupos:', Object.keys(analysis.groups));

// 6. Sugerencias de b√∫squeda
console.log('\n6. üí° SUGERENCIAS DE B√öSQUEDA');
console.log('-'.repeat(40));

const searchQueries = ['react', 'cloud', 'data'];
for (const query of searchQueries) {
  const suggestions = tagSystem.suggestTags(query, 5);
  console.log(`\nB√∫squeda: "${query}"`);
  for (const suggestion of suggestions) {
    console.log(`  ‚Üí ${suggestion.tag} (${suggestion.type}, relevancia: ${suggestion.relevance})`);
  }
}

// 7. Estad√≠sticas de una colecci√≥n de tags
console.log('\n7. üìà ESTAD√çSTICAS DE TAGS');
console.log('-'.repeat(40));

const allJobTags = [
  'javascript',
  'python',
  'react',
  'aws',
  'docker',
  'js',
  'gcp',
  'kubernetes',
  'postgresql',
  'typescript',
  'google cloud',
  'k8s',
  'node.js',
  'mongo',
];

const stats = tagSystem.getTagStats(allJobTags);
console.log('Total de tags:', stats.total);
console.log('Tags √∫nicos (despu√©s de normalizaci√≥n):', stats.unique);
console.log('Por categor√≠a:', stats.byCategory);
console.log('Por grupo:', stats.byGroup);
console.log('M√°s comunes:', stats.mostCommon);

// 8. Casos de uso pr√°cticos
console.log('\n8. üéØ CASOS DE USO PR√ÅCTICOS');
console.log('-'.repeat(40));

// Caso 1: Filtrar trabajos de cloud
console.log('\n‚Ä¢ Trabajos de Cloud Computing:');
const cloudTags = tagSystem.getTagsByCategory('cloud');
console.log('  Tags de cloud:', cloudTags);

// Caso 2: Buscar trabajos de frontend
console.log('\n‚Ä¢ Trabajos de Frontend:');
const frontendGroup = tagSystem.tagGroups['frontend-frameworks'];
console.log('  Frameworks frontend:', frontendGroup.tags);

// Caso 3: Normalizar lista de skills de CV
console.log('\n‚Ä¢ Normalizar skills de CV:');
const cvSkills = ['React.js', 'Node', 'GCP', 'MongoDB', 'K8s'];
const normalizedSkills = tagSystem.normalizeTags(cvSkills);
console.log('  Skills originales:', cvSkills);
console.log('  Skills normalizados:', normalizedSkills);

console.log(`\n${'='.repeat(60)}`);
console.log('‚úÖ Demostraci√≥n completada. El sistema maneja:');
console.log('   ‚Ä¢ Normalizaci√≥n autom√°tica de equivalencias');
console.log('   ‚Ä¢ Eliminaci√≥n inteligente de duplicados');
console.log('   ‚Ä¢ Agrupaci√≥n por categor√≠as y grupos');
console.log('   ‚Ä¢ Sugerencias basadas en contexto');
console.log('   ‚Ä¢ An√°lisis estad√≠stico avanzado');
console.log('='.repeat(60));

module.exports = {
  runDemo: () => {
    // Esta funci√≥n puede ser llamada desde otros archivos
    console.log('Ejecutando demostraci√≥n del sistema de tags...');
  },
};
